/**
 * @author Olivier Kaluzny
 *
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */
 
#ifndef OBJECTDETECT_OBJECTDETECT_H
#define OBJECTDETECT_OBJECTDETECT_H

#include "alptr.h"

#include "alloggerproxy.h"
#include <string>

namespace AL
{



/**
 * DESCRIBE YOUR CLASS HERE
 */
class ObjectDetect : public AL::ALModule
{

  public:

    /**
     * Default Constructor.
     */
     ObjectDetect(AL::ALPtr<AL::ALBroker> pBroker, const std::string& pName );

    /**
     * Destructor.
     */
    virtual ~ObjectDetect();
 	
 	/**
     * registerToVIM : Register to the V.I.M.
     */
    void registerToVIM(const int &pResolution, const int &pColorSpace, const int &pFps);

    /**
     * unRegisterFromVIM : Unregister from the V.I.M.
     */
    void unRegisterFromVIM();

    std::vector<float> takePhoto(const float &R, const float &G,const float &B);
    virtual void init();
  
 
  private:

    // Proxy to the logger module.
    ALPtr<AL::ALLoggerProxy> fLogProxy;

    // Proxy to the video input module.
    ALPtr<AL::ALProxy> fCamProxy;
    
    // This is set to true when we have subscribed one module to the VideoDevice.
    bool fRegisteredToVim;
    
    std::string fGvmName;

};
}
#endif  // OBJECTDETECT_OBJECTDETECT_H

